{"ast":null,"code":"var _jsxFileName = \"/Users/yuzucchi/Documents/operations/nft/scaffold-eth/packages/react-app/src/components/Balance.jsx\";\nimport { formatEther } from \"@ethersproject/units\";\nimport React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  if (props.price) return /*#__PURE__*/React.createElement(React.Fragment, null);\n  const [dollarMode, setDollarMode] = useState(false); // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  if (price && !dollarMode) {\n    displayBalance = \"Ξ\" + displayBalance;\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      verticalAlign: \"middle\",\n      fontSize: props.size ? props.size : 16,\n      padding: 8,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setDollarMode(!dollarMode);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, displayBalance);\n}","map":{"version":3,"sources":["/Users/yuzucchi/Documents/operations/nft/scaffold-eth/packages/react-app/src/components/Balance.jsx"],"names":["formatEther","React","useState","useBalance","Balance","props","price","dollarMode","setDollarMode","balance","provider","address","floatBalance","parseFloat","usingBalance","value","etherBalance","toFixed","displayBalance","dollarMultiplier","verticalAlign","fontSize","size","padding","cursor"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,UAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrC,MAAIA,KAAK,CAACC,KAAV,EAAiB,oBAAO,yCAAP;AACjB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C,CAFqC,CAIrC;;AAEA,QAAMO,OAAO,GAAGN,UAAU,CAACE,KAAK,CAACK,QAAP,EAAiBL,KAAK,CAACM,OAAvB,CAA1B;AAEA,MAAIC,YAAY,GAAGC,UAAU,CAAC,MAAD,CAA7B;AAEA,MAAIC,YAAY,GAAGL,OAAnB;;AAEA,MAAI,OAAOJ,KAAK,CAACI,OAAb,KAAyB,WAA7B,EAA0C;AACxCK,IAAAA,YAAY,GAAGT,KAAK,CAACI,OAArB;AACD;;AACD,MAAI,OAAOJ,KAAK,CAACU,KAAb,KAAuB,WAA3B,EAAwC;AACtCD,IAAAA,YAAY,GAAGT,KAAK,CAACU,KAArB;AACD;;AAED,MAAID,YAAJ,EAAkB;AAChB,UAAME,YAAY,GAAGhB,WAAW,CAACc,YAAD,CAAhC;AACAD,IAAAA,UAAU,CAACG,YAAD,CAAV,CAAyBC,OAAzB,CAAiC,CAAjC;AACAL,IAAAA,YAAY,GAAGC,UAAU,CAACG,YAAD,CAAzB;AACD;;AAED,MAAIE,cAAc,GAAGN,YAAY,CAACK,OAAb,CAAqB,CAArB,CAArB;AAEA,QAAMX,KAAK,GAAGD,KAAK,CAACC,KAAN,IAAeD,KAAK,CAACc,gBAAnC;;AAEA,MAAIb,KAAK,IAAIC,UAAb,EAAyB;AACvBW,IAAAA,cAAc,GAAG,MAAM,CAACN,YAAY,GAAGN,KAAhB,EAAuBW,OAAvB,CAA+B,CAA/B,CAAvB;AACD;;AAED,MAAIX,KAAK,IAAI,CAACC,UAAd,EAA0B;AACxBW,IAAAA,cAAc,GAAG,MAAMA,cAAvB;AACD;;AACD,sBACE;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,aAAa,EAAE,QADV;AAELC,MAAAA,QAAQ,EAAEhB,KAAK,CAACiB,IAAN,GAAajB,KAAK,CAACiB,IAAnB,GAA0B,EAF/B;AAGLC,MAAAA,OAAO,EAAE,CAHJ;AAILC,MAAAA,MAAM,EAAE;AAJH,KADT;AAOE,IAAA,OAAO,EAAE,MAAM;AACbhB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGW,cAXH,CADF;AAeD","sourcesContent":["import { formatEther } from \"@ethersproject/units\";\nimport React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  if (props.price) return <></>;\n  const [dollarMode, setDollarMode] = useState(false);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  if (price && !dollarMode) {\n    displayBalance = \"Ξ\" + displayBalance;\n  }\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 16,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}