{"ast":null,"code":"var _jsxFileName = \"/Users/yuzucchi/Documents/operations/nft/scaffold-eth/packages/react-app/src/App.jsx\";\nimport { LinkOutlined } from \"@ant-design/icons\";\nimport { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport { formatEther, parseEther } from \"@ethersproject/units\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Alert, Button, Card, Col, Input, List, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { utils } from \"ethers\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport assets from \"./assets.js\";\nimport { Account, Address, AddressInput, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch, Navbar } from \"./components\";\nimport { Home, MyCrabs, Gallery } from \"./views\";\nimport { DAI_ABI, DAI_ADDRESS, INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport axios from \"axios\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport { useBalance, useContractLoader, useContractReader, useEventListener, useExchangePrice, useExternalContractLoader, useGasPrice, useOnBlock, useinjectedProvider } from \"./hooks\";\n\nconst nftImg = ({\n  image\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(LazyLoadImage, {\n  style: image.style,\n  alt: image.alt,\n  height: image.height,\n  src: image.src // use normal <img> attributes as props\n  ,\n  width: image.width,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }\n}, image.caption));\n\nconst {\n  BufferList\n} = require(\"bl\"); // https://www.npmjs.com/package/ipfs-http-client\n\n\nconst ipfsAPI = require(\"ipfs-http-client\");\n\nconst ipfs = ipfsAPI({\n  host: \"ipfs.infura.io\",\n  port: \"5001\",\n  protocol: \"https\"\n});\nconst ipfsGateway = \"https://cloudflare-ipfs.com/ipfs/\";\nconsole.log(\"üì¶ Assets: \", assets);\n/*\n    Welcome to üèó scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    üåè EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n/// üì° What chain are your contracts deployed to?\n\nconst targetNetwork = NETWORKS.rinkeby; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n// üò¨ Sorry for all the console logging\n\nconst DEBUG = true; // helper function to \"Get\" from IPFS\n// you usually go content.toString() after this...\n\nconst getFromIPFS = async hashToGet => {\n  for await (const file of ipfs.get(hashToGet)) {\n    console.log(file.path);\n    if (!file.content) continue;\n    const content = new BufferList();\n\n    for await (const chunk of file.content) {\n      content.append(chunk);\n    }\n\n    console.log(content);\n    return content;\n  }\n}; // üõ∞ providers\n\n\nif (DEBUG) console.log(\"üì° Connecting to Mainnet Ethereum\"); // const injectedProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const injectedProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\n\nconst scaffoldEthProvider = new StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\");\nconst mainnetInfura = new StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID); // ( ‚ö†Ô∏è Getting \"failed to meet quorum\" errors? Check your INFURA_I\n// const getRandProviderUrl = () => targetNetwork.rpcUrl[Math.floor(Math.random() * targetNetwork.rpcUrl.length)];\n// üè† Your local provider is usually pointed at your local blockchain\n// let injectedProviderUrl = getRandProviderUrl();\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\n// const injectedProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : injectedProviderUrl;\n// if (DEBUG) console.log(\"üè† Connecting to provider:\", injectedProviderUrlFromEnv);\n// const injectedProvider = new StaticJsonRpcProvider(injectedProviderUrlFromEnv);\n// üî≠ block explorer URL\n\nconst blockExplorer = targetNetwork.blockExplorer;\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\n\nconst web3Modal = new Web3Modal({\n  network: targetNetwork.name,\n  // optional\n  cacheProvider: true,\n  // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider,\n      // required\n      options: {\n        infuraId: INFURA_ID\n      }\n    }\n  }\n});\n\nconst logoutOfWeb3Modal = async () => {\n  await web3Modal.clearCachedProvider();\n  setTimeout(() => {\n    window.location.reload();\n  }, 1);\n};\n\nfunction App(props) {\n  // scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n  const [injectedProvider, setInjectedProvider] = useState(); // Use your injected provider from ü¶ä Metamask or if you don't have it then instantly generate a üî• burner wallet.\n  // const injectedProvider = useinjectedProvider(injectedProvider);\n\n  const address = useUserAddress(injectedProvider);\n  /* üíµ This hook will get the price of ETH from ü¶Ñ Uniswap: */\n\n  const price = false;\n  /* üî• This hook will get the price of Gas from ‚õΩÔ∏è EtherGasStation */\n\n  const gasPrice = useGasPrice(targetNetwork, \"normal\"); // You can warn the user if you would like them to be on a specific network\n\n  const localChainId = 1; // const selectedChainId = injectedProvider && injectedProvider._network && injectedProvider._network.chainId;\n  // For more hooks, check out üîóeth-hooks at: https://www.npmjs.com/package/eth-hooks\n  // The transactor wraps transactions and provides notificiations\n\n  const tx = Transactor(injectedProvider, gasPrice); // Faucet Tx can be used to send funds from the faucet\n\n  const faucetTx = Transactor(injectedProvider, gasPrice); // üèó scaffold-eth is full of handy hooks like this one to get your balance:\n\n  const yourLocalBalance = useBalance(injectedProvider, address); // Just plug in different üõ∞ providers to get your balance on different chains:\n\n  const yourMainnetBalance = useBalance(injectedProvider, address); // Load in your local üìù contract and read a value from it:\n\n  const readContracts = useContractLoader(injectedProvider); // If you want to make üîê write transactions to your contracts, use the injectedProvider:\n\n  const writeContracts = useContractLoader(injectedProvider); // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  // const mainnetDAIContract = useExternalContractLoader(injectedProvider, DAI_ADDRESS, DAI_ABI);\n  // If you want to call a function on a new block\n  // useOnBlock(injectedProvider, () => {\n  //   console.log(`‚õì A new mainnet block is here: ${injectedProvider._lastBlockNumber}`);\n  // });\n  // Then read your DAI balance like:\n  // const myMainnetDAIBalance = useContractReader({ DAI: mainnetDAIContract }, \"DAI\", \"balanceOf\", [\n  //   \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  // ]);\n  // keep track of a variable from the contract in the local React state:\n\n  const balance = useContractReader(readContracts, \"Crabrades\", \"balanceOf\", [address]);\n  console.log(\"ü§ó balance:\", balance); // üìü Listen for broadcast events\n\n  const transferEvents = useEventListener(readContracts, \"Crabrades\", \"Transfer\", injectedProvider, 1);\n  console.log(\"üìü Transfer events:\", transferEvents); //\n  // üß† This effect will update crabrades by polling when your balance changes\n  //\n\n  const maxSupply = 9999;\n  const maxReserved = 35;\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\n  const [crabrades, setCrabrades] = useState();\n  const [mintPrice, setMintPrice] = useState(false);\n  const [supply, setSupply] = useState(false); // const [maxSupply, setMaxSupply] = useState(false);\n  // const [reserved, setResrved] = useState(false);\n\n  useEffect(() => {\n    if (injectedProvider && injectedProvider.networks && injectedProvider.networks.name === targetNetwork.name && readContracts.Crabrades && !mintPrice) (async () => {\n      const mp = await readContracts.Crabrades.getPrice(); // const reserved = await readContracts.Crabrades.getRemainingReserved();\n\n      const supply = await readContracts.Crabrades.totalSupply(); // setResrved(reserved);\n\n      setSupply(supply);\n      setMintPrice(formatEther(mp));\n    })();\n  }, [mintPrice, readContracts]);\n  useEffect(() => {\n    const updateCrabrades = async () => {\n      const collectibleUpdate = [];\n\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\n        try {\n          console.log(\"GEtting token index\", tokenIndex);\n          const tokenId = await readContracts.Crabrades.tokenOfOwnerByIndex(address, tokenIndex);\n          console.log(\"tokenId\", tokenId);\n          const tokenURI = await readContracts.Crabrades.tokenURI(tokenId);\n          console.log(\"tokenURI\", tokenURI);\n          let data = {};\n\n          try {\n            const result = await axios.get(tokenURI);\n            data = result.data;\n            data.image = data.image.replace(\"ipfs://\", ipfsGateway);\n          } catch (e) {\n            console.log(e);\n          }\n\n          collectibleUpdate.push({\n            id: tokenId,\n            uri: tokenURI,\n            owner: address,\n            ...data\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      setCrabrades(collectibleUpdate);\n    };\n\n    updateCrabrades();\n  }, [address, yourBalance]);\n  /*\n  const addressFromENS = useResolveName(injectedProvider, \"austingriffith.eth\");\n  console.log(\"üè∑ Resolved austingriffith.eth as:\",addressFromENS)\n  */\n  //\n  // üß´ DEBUG üë®üèª‚Äçüî¨\n  //\n\n  useEffect(() => {\n    if (DEBUG && injectedProvider && address && yourLocalBalance && yourMainnetBalance && readContracts && writeContracts // &&\n    // mainnetDAIContract\n    ) {\n        console.log(\"_____________________________________ Creb _____________________________________\");\n        console.log(\"üåé injectedProvider\", injectedProvider);\n        console.log(\"üë©‚Äçüíº selected address:\", address);\n        console.log(\"üìù readContracts\", readContracts);\n        console.log(\"üîê writeContracts\", writeContracts);\n      }\n  }, [injectedProvider, address, yourLocalBalance, yourMainnetBalance, readContracts, writeContracts // mainnetDAIContract,\n  ]);\n  const [networkDisplay, setNetworkDisplay] = useState(\"\");\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new Web3Provider(provider));\n  }, [setInjectedProvider]);\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n  useEffect(() => {\n    if (injectedProvider && injectedProvider.network && injectedProvider.network.name !== targetNetwork.name) {\n      setNetworkDisplay( /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          zIndex: 2,\n          position: \"absolute\",\n          right: 0,\n          top: 60,\n          padding: 16\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Alert, {\n        message: \"\\u26A0\\uFE0F Wrong Network\",\n        description: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }\n        }, \"You have \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 26\n          }\n        }, injectedProvider.network.name), \" selected and you need to be on\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 17\n          }\n        }, targetNetwork.name && targetNetwork.name), \".\"),\n        type: \"error\",\n        closable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }\n      })));\n      loadWeb3Modal();\n    }\n  }, []);\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n  let faucetHint = \"\";\n  const faucetAvailable = injectedProvider && injectedProvider.connection && targetNetwork.name === \"localhost\";\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  if (!faucetClicked && injectedProvider && injectedProvider._network && injectedProvider._network.chainId === 31337 && // yourLocalBalance &&\n  formatEther(yourLocalBalance) <= 0) {\n    faucetHint = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 16\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => {\n        faucetTx({\n          to: address,\n          value: parseEther(\"0.01\")\n        });\n        setFaucetClicked(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }\n    }, \"\\uD83D\\uDCB0 Grab funds from the faucet \\u26FD\\uFE0F\"));\n  } // const [sending, setSending] = useState();\n  // const [ipfsHash, setIpfsHash] = useState();\n  // const [ipfsDownHash, setIpfsDownHash] = useState();\n  // const [downloading, setDownloading] = useState();\n  // const [ipfsContent, setIpfsContent] = useState();\n\n\n  const [transferToAddresses, setTransferToAddresses] = useState({});\n  const [loadedAssets, setLoadedAssets] = useState(); // const [mintPrice, setMintPrice] = useState();\n\n  useEffect(() => {\n    const updateCrabrades = async () => {\n      const assetUpdate = [];\n\n      for (const a in transferEvents) {\n        try {\n          let transfer = transferEvents[a];\n          let owner;\n          const tokenURI = await readContracts.Crabrades.tokenURI(transfer[2]);\n          owner = await readContracts.Crabrades.ownerOf(transfer[2].toNumber());\n          let data = {};\n\n          try {\n            const result = await axios.get(tokenURI);\n            data = result.data;\n            data.image = data.image.replace(\"ipfs://\", ipfsGateway);\n          } catch (e) {\n            console.log(e);\n          }\n\n          assetUpdate.push({\n            id: transfer[2].toNumber(),\n            owner,\n            tokenURI,\n            metadata: data\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      setLoadedAssets(assetUpdate);\n    };\n\n    if (readContracts && readContracts.Crabrades) updateCrabrades();\n  }, [readContracts, transferEvents]);\n  const galleryList = [];\n\n  for (const a in loadedAssets) {\n    console.log(\"loadedAssets\", a, loadedAssets[a]);\n    const cardActions = [];\n    cardActions.push( /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 7\n      }\n    }, \"owned by:\", \" \", /*#__PURE__*/React.createElement(Address, {\n      address: loadedAssets[a].owner,\n      ensProvider: injectedProvider,\n      blockExplorer: blockExplorer,\n      minimized: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }\n    })));\n    galleryList.push( /*#__PURE__*/React.createElement(Card, {\n      style: {\n        width: 200\n      },\n      key: loadedAssets[a].metadata.name,\n      actions: cardActions,\n      title: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }\n      }, loadedAssets[a].metadata.name, \" \", /*#__PURE__*/React.createElement(\"a\", {\n        style: {\n          cursor: \"pointer\",\n          opacity: 0.33\n        },\n        href: `https://opensea.io/assets/0x280ecba1194ae1500ddad4a5f4a7e8270066146a/${loadedAssets[a].id}`,\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(LinkOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 15\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        maxWidth: 130\n      },\n      src: loadedAssets[a].metadata.image,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        opacity: 0.77\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }\n    }, JSON.toString(loadedAssets[a].metadata.attributes))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    address,\n    price,\n    web3Modal,\n    loadWeb3Modal,\n    logoutOfWeb3Modal,\n    injectedProvider,\n    blockExplorer,\n    networkDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Home, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/gallery\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Gallery, {\n    galleryList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 13\n    }\n  })), injectedProvider && /*#__PURE__*/React.createElement(Route, {\n    path: \"/yourcollectibles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MyCrabs, {\n    crabrades,\n    blockExplorer,\n    injectedProvider,\n    setTransferToAddresses,\n    tx,\n    writeContracts,\n    address,\n    transferToAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 15\n    }\n  })), DEBUG && injectedProvider && /*#__PURE__*/React.createElement(Route, {\n    path: \"/transfers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: 600,\n      margin: \"auto\",\n      marginTop: 32,\n      paddingBottom: 32\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    bordered: true,\n    dataSource: transferEvents,\n    renderItem: item => {\n      return /*#__PURE__*/React.createElement(List.Item, {\n        key: item[0] + \"_\" + item[1] + \"_\" + item.blockNumber + \"_\" + item[2].toNumber(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          fontSize: 16,\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 25\n        }\n      }, \"#\", item[2].toNumber()), /*#__PURE__*/React.createElement(Address, {\n        address: item[0],\n        ensProvider: injectedProvider,\n        fontSize: 16,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 25\n        }\n      }), \" =>\", /*#__PURE__*/React.createElement(Address, {\n        address: item[1],\n        ensProvider: injectedProvider,\n        fontSize: 16,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 25\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 17\n    }\n  }))), DEBUG && injectedProvider && /*#__PURE__*/React.createElement(Route, {\n    path: \"/debugcontracts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Contract, {\n    name: \"Crabrades\",\n    signer: injectedProvider.getSigner(),\n    provider: injectedProvider,\n    address: address,\n    blockExplorer: blockExplorer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(ThemeSwitch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 7\n    }\n  }));\n}\n/* eslint-disable */\n\n\nwindow.ethereum && window.ethereum.on(\"chainChanged\", chainId => {\n  web3Modal.cachedProvider && setTimeout(() => {\n    window.location.reload();\n  }, 1);\n});\nwindow.ethereum && window.ethereum.on(\"accountsChanged\", accounts => {\n  web3Modal.cachedProvider && setTimeout(() => {\n    window.location.reload();\n  }, 1);\n});\n/* eslint-enable */\n\nexport default App;","map":{"version":3,"sources":["/Users/yuzucchi/Documents/operations/nft/scaffold-eth/packages/react-app/src/App.jsx"],"names":["LinkOutlined","StaticJsonRpcProvider","Web3Provider","formatEther","parseEther","WalletConnectProvider","Alert","Button","Card","Col","Input","List","Menu","Row","useUserAddress","utils","React","useCallback","useEffect","useState","BrowserRouter","Link","Route","Switch","Web3Modal","assets","Account","Address","AddressInput","Contract","Faucet","GasGauge","Header","Ramp","ThemeSwitch","Navbar","Home","MyCrabs","Gallery","DAI_ABI","DAI_ADDRESS","INFURA_ID","NETWORK","NETWORKS","Transactor","axios","LazyLoadImage","useBalance","useContractLoader","useContractReader","useEventListener","useExchangePrice","useExternalContractLoader","useGasPrice","useOnBlock","useinjectedProvider","nftImg","image","style","alt","height","src","width","caption","BufferList","require","ipfsAPI","ipfs","host","port","protocol","ipfsGateway","console","log","targetNetwork","rinkeby","DEBUG","getFromIPFS","hashToGet","file","get","path","content","chunk","append","scaffoldEthProvider","mainnetInfura","blockExplorer","web3Modal","network","name","cacheProvider","providerOptions","walletconnect","package","options","infuraId","logoutOfWeb3Modal","clearCachedProvider","setTimeout","window","location","reload","App","props","injectedProvider","setInjectedProvider","address","price","gasPrice","localChainId","tx","faucetTx","yourLocalBalance","yourMainnetBalance","readContracts","writeContracts","balance","transferEvents","maxSupply","maxReserved","yourBalance","toNumber","crabrades","setCrabrades","mintPrice","setMintPrice","supply","setSupply","networks","Crabrades","mp","getPrice","totalSupply","updateCrabrades","collectibleUpdate","tokenIndex","tokenId","tokenOfOwnerByIndex","tokenURI","data","result","replace","e","push","id","uri","owner","networkDisplay","setNetworkDisplay","loadWeb3Modal","provider","connect","cachedProvider","zIndex","position","right","top","padding","route","setRoute","pathname","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","_network","chainId","to","value","transferToAddresses","setTransferToAddresses","loadedAssets","setLoadedAssets","assetUpdate","a","transfer","ownerOf","metadata","galleryList","cardActions","cursor","opacity","maxWidth","JSON","toString","attributes","margin","marginTop","paddingBottom","item","blockNumber","fontSize","marginRight","getSigner","ethereum","on","accounts"],"mappings":"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","sourcesContent":["import { LinkOutlined } from \"@ant-design/icons\";\nimport { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport { formatEther, parseEther } from \"@ethersproject/units\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Alert, Button, Card, Col, Input, List, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { utils } from \"ethers\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\n\nimport assets from \"./assets.js\";\nimport {\n  Account,\n  Address,\n  AddressInput,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  Navbar,\n} from \"./components\";\nimport { Home, MyCrabs, Gallery } from \"./views\";\nimport { DAI_ABI, DAI_ADDRESS, INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport axios from \"axios\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useEventListener,\n  useExchangePrice,\n  useExternalContractLoader,\n  useGasPrice,\n  useOnBlock,\n  useinjectedProvider,\n} from \"./hooks\";\n\nconst nftImg = ({ image }) => (\n  <div>\n    <LazyLoadImage\n      style={image.style}\n      alt={image.alt}\n      height={image.height}\n      src={image.src} // use normal <img> attributes as props\n      width={image.width}\n    />\n    <span>{image.caption}</span>\n  </div>\n);\nconst { BufferList } = require(\"bl\");\n// https://www.npmjs.com/package/ipfs-http-client\nconst ipfsAPI = require(\"ipfs-http-client\");\n\nconst ipfs = ipfsAPI({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\nconst ipfsGateway = \"https://cloudflare-ipfs.com/ipfs/\";\nconsole.log(\"üì¶ Assets: \", assets);\n\n/*\n    Welcome to üèó scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    üåè EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// üì° What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.rinkeby; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// üò¨ Sorry for all the console logging\nconst DEBUG = true;\n\n// helper function to \"Get\" from IPFS\n// you usually go content.toString() after this...\nconst getFromIPFS = async hashToGet => {\n  for await (const file of ipfs.get(hashToGet)) {\n    console.log(file.path);\n    if (!file.content) continue;\n    const content = new BufferList();\n    for await (const chunk of file.content) {\n      content.append(chunk);\n    }\n    console.log(content);\n    return content;\n  }\n};\n\n// üõ∞ providers\nif (DEBUG) console.log(\"üì° Connecting to Mainnet Ethereum\");\n// const injectedProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const injectedProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = new StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\");\nconst mainnetInfura = new StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID);\n// ( ‚ö†Ô∏è Getting \"failed to meet quorum\" errors? Check your INFURA_I\n\n// const getRandProviderUrl = () => targetNetwork.rpcUrl[Math.floor(Math.random() * targetNetwork.rpcUrl.length)];\n// üè† Your local provider is usually pointed at your local blockchain\n// let injectedProviderUrl = getRandProviderUrl();\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\n// const injectedProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : injectedProviderUrl;\n// if (DEBUG) console.log(\"üè† Connecting to provider:\", injectedProviderUrlFromEnv);\n// const injectedProvider = new StaticJsonRpcProvider(injectedProviderUrlFromEnv);\n\n// üî≠ block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: targetNetwork.name, // optional\n  cacheProvider: true, // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId: INFURA_ID,\n      },\n    },\n  },\n});\n\nconst logoutOfWeb3Modal = async () => {\n  await web3Modal.clearCachedProvider();\n  setTimeout(() => {\n    window.location.reload();\n  }, 1);\n};\n\nfunction App(props) {\n  // scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  // Use your injected provider from ü¶ä Metamask or if you don't have it then instantly generate a üî• burner wallet.\n  // const injectedProvider = useinjectedProvider(injectedProvider);\n  const address = useUserAddress(injectedProvider);\n  /* üíµ This hook will get the price of ETH from ü¶Ñ Uniswap: */\n  const price = false;\n\n  /* üî• This hook will get the price of Gas from ‚õΩÔ∏è EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"normal\");\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = 1;\n  // const selectedChainId = injectedProvider && injectedProvider._network && injectedProvider._network.chainId;\n  // For more hooks, check out üîóeth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(injectedProvider, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(injectedProvider, gasPrice);\n\n  // üèó scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(injectedProvider, address);\n\n  // Just plug in different üõ∞ providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(injectedProvider, address);\n\n  // Load in your local üìù contract and read a value from it:\n  const readContracts = useContractLoader(injectedProvider);\n\n  // If you want to make üîê write transactions to your contracts, use the injectedProvider:\n  const writeContracts = useContractLoader(injectedProvider);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  // const mainnetDAIContract = useExternalContractLoader(injectedProvider, DAI_ADDRESS, DAI_ABI);\n\n  // If you want to call a function on a new block\n  // useOnBlock(injectedProvider, () => {\n  //   console.log(`‚õì A new mainnet block is here: ${injectedProvider._lastBlockNumber}`);\n  // });\n\n  // Then read your DAI balance like:\n  // const myMainnetDAIBalance = useContractReader({ DAI: mainnetDAIContract }, \"DAI\", \"balanceOf\", [\n  //   \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  // ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const balance = useContractReader(readContracts, \"Crabrades\", \"balanceOf\", [address]);\n  console.log(\"ü§ó balance:\", balance);\n\n  // üìü Listen for broadcast events\n  const transferEvents = useEventListener(readContracts, \"Crabrades\", \"Transfer\", injectedProvider, 1);\n  console.log(\"üìü Transfer events:\", transferEvents);\n\n  //\n  // üß† This effect will update crabrades by polling when your balance changes\n  //\n  const maxSupply = 9999;\n  const maxReserved = 35;\n\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\n  const [crabrades, setCrabrades] = useState();\n  const [mintPrice, setMintPrice] = useState(false);\n  const [supply, setSupply] = useState(false);\n  // const [maxSupply, setMaxSupply] = useState(false);\n  // const [reserved, setResrved] = useState(false);\n\n  useEffect(() => {\n    if (injectedProvider && injectedProvider.networks && (injectedProvider.networks.name === targetNetwork.name) && readContracts.Crabrades && !mintPrice)\n      (async () => {\n        const mp = await readContracts.Crabrades.getPrice();\n        // const reserved = await readContracts.Crabrades.getRemainingReserved();\n        const supply = await readContracts.Crabrades.totalSupply();\n\n        // setResrved(reserved);\n        setSupply(supply);\n        setMintPrice(formatEther(mp));\n      })();\n  }, [mintPrice, readContracts]);\n\n  useEffect(() => {\n    const updateCrabrades = async () => {\n      const collectibleUpdate = [];\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\n        try {\n          console.log(\"GEtting token index\", tokenIndex);\n          const tokenId = await readContracts.Crabrades.tokenOfOwnerByIndex(address, tokenIndex);\n          console.log(\"tokenId\", tokenId);\n          const tokenURI = await readContracts.Crabrades.tokenURI(tokenId);\n          console.log(\"tokenURI\", tokenURI);\n\n          let data = {};\n          try {\n            const result = await axios.get(tokenURI);\n            data = result.data;\n            data.image = data.image.replace(\"ipfs://\", ipfsGateway);\n          } catch (e) {\n            console.log(e);\n          }\n\n          collectibleUpdate.push({ id: tokenId, uri: tokenURI, owner: address, ...data });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      setCrabrades(collectibleUpdate);\n    };\n    updateCrabrades();\n  }, [address, yourBalance]);\n\n  /*\n  const addressFromENS = useResolveName(injectedProvider, \"austingriffith.eth\");\n  console.log(\"üè∑ Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // üß´ DEBUG üë®üèª‚Äçüî¨\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      injectedProvider &&\n      address &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts\n      // &&\n      // mainnetDAIContract\n    ) {\n      console.log(\"_____________________________________ Creb _____________________________________\");\n      console.log(\"üåé injectedProvider\", injectedProvider);\n      console.log(\"üë©‚Äçüíº selected address:\", address);\n      console.log(\"üìù readContracts\", readContracts);\n      console.log(\"üîê writeContracts\", writeContracts);\n    }\n  }, [\n    injectedProvider,\n    address,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    // mainnetDAIContract,\n  ]);\n\n  const [ networkDisplay, setNetworkDisplay ] = useState(\"\");\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new Web3Provider(provider));\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  useEffect(() => {\n    if (injectedProvider && injectedProvider.network && (injectedProvider.network.name !== targetNetwork.name)) {\n      setNetworkDisplay(\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"‚ö†Ô∏è Wrong Network\"\n            description={\n              <div>\n                You have <b>{injectedProvider.network.name}</b> selected and you need to be on{\" \"}\n                <b>{targetNetwork.name && targetNetwork.name}</b>.\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n      loadWeb3Modal();\n    }\n  }, []);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = injectedProvider && injectedProvider.connection && targetNetwork.name === \"localhost\";\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    injectedProvider &&\n    injectedProvider._network &&\n    injectedProvider._network.chainId === 31337 &&\n    // yourLocalBalance &&\n    formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          üí∞ Grab funds from the faucet ‚õΩÔ∏è\n        </Button>\n      </div>\n    );\n  }\n\n  // const [sending, setSending] = useState();\n  // const [ipfsHash, setIpfsHash] = useState();\n  // const [ipfsDownHash, setIpfsDownHash] = useState();\n\n  // const [downloading, setDownloading] = useState();\n  // const [ipfsContent, setIpfsContent] = useState();\n\n  const [transferToAddresses, setTransferToAddresses] = useState({});\n\n  const [loadedAssets, setLoadedAssets] = useState();\n  // const [mintPrice, setMintPrice] = useState();\n\n  useEffect(() => {\n    const updateCrabrades = async () => {\n      const assetUpdate = [];\n      for (const a in transferEvents) {\n        try {\n          let transfer = transferEvents[a];\n          let owner;\n          const tokenURI = await readContracts.Crabrades.tokenURI(transfer[2]);\n          owner = await readContracts.Crabrades.ownerOf(transfer[2].toNumber());\n          let data = {};\n          try {\n            const result = await axios.get(tokenURI);\n            data = result.data;\n            data.image = data.image.replace(\"ipfs://\", ipfsGateway);\n          } catch (e) {\n            console.log(e);\n          }\n          assetUpdate.push({ id: transfer[2].toNumber(), owner, tokenURI, metadata: data });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      setLoadedAssets(assetUpdate);\n    };\n    if (readContracts && readContracts.Crabrades) updateCrabrades();\n  }, [readContracts, transferEvents]);\n\n  const galleryList = [];\n\n  for (const a in loadedAssets) {\n    console.log(\"loadedAssets\", a, loadedAssets[a]);\n    const cardActions = [];\n    cardActions.push(\n      <div>\n        owned by:{\" \"}\n        <Address\n          address={loadedAssets[a].owner}\n          ensProvider={injectedProvider}\n          blockExplorer={blockExplorer}\n          minimized\n        />\n      </div>,\n    );\n    galleryList.push(\n      <Card\n        style={{ width: 200 }}\n        key={loadedAssets[a].metadata.name}\n        actions={cardActions}\n        title={\n          <div>\n            {loadedAssets[a].metadata.name}{\" \"}\n            <a\n              style={{ cursor: \"pointer\", opacity: 0.33 }}\n              href={`https://opensea.io/assets/0x280ecba1194ae1500ddad4a5f4a7e8270066146a/${loadedAssets[a].id}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <LinkOutlined />\n            </a>\n          </div>\n        }\n      >\n        <img style={{ maxWidth: 130 }} src={loadedAssets[a].metadata.image} alt=\"\" />\n        <div style={{ opacity: 0.77 }}>{JSON.toString(loadedAssets[a].metadata.attributes)}</div>\n      </Card>,\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Navbar {...{ address, price, web3Modal, loadWeb3Modal, logoutOfWeb3Modal, injectedProvider, blockExplorer, networkDisplay }} />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n            {/* <div>\n              <div>\n                <h3>Mint Price: {mintPrice ? mintPrice : \"\"}</h3>\n                <ClipLoader size={50} color={\"red\"} loading={!!!mintPrice} speedMultiplier={1.5} />\n              </div>\n\n              <Button\n                onClick={() => {\n                  console.log(\"gasPrice,\", gasPrice);\n                  tx(writeContracts.Crabrades.adopt(1, { value: parseEther(mintPrice) }));\n                }}\n              >\n                Mint\n              </Button>\n              <div style={{ maxWidth: 820, margin: \"auto\", marginTop: 32, paddingBottom: 256 }}>\n                <StackGrid columnWidth={200} gutterWidth={16} gutterHeight={16}>\n                  {galleryList}\n                </StackGrid>\n              </div>\n            </div> */}\n          </Route>\n          <Route exact path=\"/gallery\">\n            <Gallery {...{ galleryList }} />\n          </Route>\n\n          {injectedProvider && (\n            <Route path=\"/yourcollectibles\">\n              <MyCrabs\n                {...{\n                  crabrades,\n                  blockExplorer,\n                  injectedProvider,\n                  setTransferToAddresses,\n                  tx,\n                  writeContracts,\n                  address,\n                  transferToAddresses,\n                }}\n              />\n            </Route>\n          )}\n\n          {DEBUG && injectedProvider && (\n            <Route path=\"/transfers\">\n              <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n                <List\n                  bordered\n                  dataSource={transferEvents}\n                  renderItem={item => {\n                    return (\n                      <List.Item key={item[0] + \"_\" + item[1] + \"_\" + item.blockNumber + \"_\" + item[2].toNumber()}>\n                        <span style={{ fontSize: 16, marginRight: 8 }}>#{item[2].toNumber()}</span>\n                        <Address address={item[0]} ensProvider={injectedProvider} fontSize={16} /> =&gt;\n                        <Address address={item[1]} ensProvider={injectedProvider} fontSize={16} />\n                      </List.Item>\n                    );\n                  }}\n                />\n              </div>\n            </Route>\n          )}\n\n          {DEBUG && injectedProvider && (\n            <Route path=\"/debugcontracts\">\n              <Contract\n                name=\"Crabrades\"\n                signer={injectedProvider.getSigner()}\n                provider={injectedProvider}\n                address={address}\n                blockExplorer={blockExplorer}\n              />\n            </Route>\n          )}\n        </Switch>\n      </BrowserRouter>\n\n      <ThemeSwitch />\n\n      {/* üó∫ Extra UI like gas price, eth price, faucet, and support: */}\n      {/* <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                üí¨\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {faucetAvailable ? (\n              <Faucet injectedProvider={injectedProvider} price={price} ensProvider={injectedProvider} />\n            ) : (\n              \"\"\n            )}\n          </Col>\n        </Row>\n      </div> */}\n    </div>\n  );\n}\n\n/* eslint-disable */\nwindow.ethereum &&\n  window.ethereum.on(\"chainChanged\", chainId => {\n    web3Modal.cachedProvider &&\n      setTimeout(() => {\n        window.location.reload();\n      }, 1);\n  });\n\nwindow.ethereum &&\n  window.ethereum.on(\"accountsChanged\", accounts => {\n    web3Modal.cachedProvider &&\n      setTimeout(() => {\n        window.location.reload();\n      }, 1);\n  });\n/* eslint-enable */\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}