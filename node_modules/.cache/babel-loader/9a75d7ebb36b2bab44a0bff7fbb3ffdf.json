{"ast":null,"code":"var _jsxFileName = \"/Users/yuzucchi/Documents/operations/nft/scaffold-eth/packages/react-app/src/components/Account.jsx\";\nimport { Button } from \"antd\";\nimport React from \"react\"; // import { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userProvider,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  networkDisplay,\n  setConnected,\n  connected\n}) {\n  const modalButtons = [];\n\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      setConnected(true);\n      modalButtons.push( /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-sm\",\n        onClick: logoutOfWeb3Modal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }, \"Logout\"));\n    } else {\n      setConnected(false);\n      modalButtons.push( /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-sm\",\n        onClick: loadWeb3Modal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }\n      }, \"Web3 Connect\"));\n    }\n  } // const { currentTheme } = useThemeSwitcher();\n\n\n  const display = minimized ? \"\" : /*#__PURE__*/React.createElement(React.Fragment, null, networkDisplay, address ? /*#__PURE__*/React.createElement(Address, {\n    address: address,\n    ensProvider: mainnetProvider,\n    blockExplorer: blockExplorer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 18\n    }\n  }) : \"\", price && /*#__PURE__*/React.createElement(Balance, {\n    address: address,\n    provider: localProvider,\n    price: price,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, display, modalButtons);\n}","map":{"version":3,"sources":["/Users/yuzucchi/Documents/operations/nft/scaffold-eth/packages/react-app/src/components/Account.jsx"],"names":["Button","React","Address","Balance","Wallet","Account","address","userProvider","localProvider","mainnetProvider","price","minimized","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","blockExplorer","networkDisplay","setConnected","connected","modalButtons","cachedProvider","push","display","alignItems"],"mappings":";AAAA,SAASA,MAAT,QAAuB,MAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,OAAT,CAAiB;AAC9BC,EAAAA,OAD8B;AAE9BC,EAAAA,YAF8B;AAG9BC,EAAAA,aAH8B;AAI9BC,EAAAA,eAJ8B;AAK9BC,EAAAA,KAL8B;AAM9BC,EAAAA,SAN8B;AAO9BC,EAAAA,SAP8B;AAQ9BC,EAAAA,aAR8B;AAS9BC,EAAAA,iBAT8B;AAU9BC,EAAAA,aAV8B;AAW9BC,EAAAA,cAX8B;AAY9BC,EAAAA,YAZ8B;AAa9BC,EAAAA;AAb8B,CAAjB,EAcZ;AACD,QAAMC,YAAY,GAAG,EAArB;;AACA,MAAIP,SAAJ,EAAe;AACb,QAAIA,SAAS,CAACQ,cAAd,EAA8B;AAC5BH,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,MAAAA,YAAY,CAACE,IAAb,eACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAEP,iBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD,KAPD,MAOO;AACLG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,YAAY,CAACE,IAAb,eACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAER,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF;AAKD;AACF,GAlBA,CAoBD;;;AAEA,QAAMS,OAAO,GAAGX,SAAS,GACvB,EADuB,gBAGvB,0CACGK,cADH,EAGGV,OAAO,gBAAG,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,OAAlB;AAA2B,IAAA,WAAW,EAAEG,eAAxC;AAAyD,IAAA,aAAa,EAAEM,aAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAA+F,EAHzG,EAIGL,KAAK,iBAAI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEJ,OAAlB;AAA2B,IAAA,QAAQ,EAAEE,aAArC;AAAoD,IAAA,KAAK,EAAEE,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJZ,CAHF;AAWA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEY,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,UAAU,EAAE;AAA/B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,OADH,EAEGH,YAFH,CADF;AAMD","sourcesContent":["import { Button } from \"antd\";\nimport React from \"react\";\n// import { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userProvider,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  networkDisplay,\n  setConnected,\n  connected,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      setConnected(true);\n      modalButtons.push(\n        <button className=\"btn btn-sm\" onClick={logoutOfWeb3Modal}>\n          Logout\n        </button>,\n      );\n    } else {\n      setConnected(false);\n      modalButtons.push(\n        <button className=\"btn btn-sm\" onClick={loadWeb3Modal}>\n          Web3 Connect\n        </button>,\n      );\n    }\n  }\n\n  // const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <>\n      {networkDisplay}\n\n      {address ? <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} /> : \"\"}\n      {price && <Balance address={address} provider={localProvider} price={price} />}\n    </>\n  );\n\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}