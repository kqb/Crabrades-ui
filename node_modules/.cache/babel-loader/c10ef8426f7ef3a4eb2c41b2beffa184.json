{"ast":null,"code":"var _jsxFileName = \"/Users/yuzucchi/Documents/operations/nft/scaffold-eth/packages/react-app/src/App.jsx\";\nimport { LinkOutlined } from \"@ant-design/icons\";\nimport { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport { formatEther, parseEther } from \"@ethersproject/units\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Alert, Button, Card, Col, Input, List, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { utils } from \"ethers\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactJson from \"react-json-view\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport assets from \"./assets.js\";\nimport { Account, Address, AddressInput, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch, Navbar } from \"./components\";\nimport { DAI_ABI, DAI_ADDRESS, INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport axios from \"axios\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport { useBalance, useContractLoader, useContractReader, useEventListener, useExchangePrice, useExternalContractLoader, useGasPrice, useOnBlock, useinjectedProvider } from \"./hooks\";\nimport { css } from \"@emotion/react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst nftImg = ({\n  image\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(LazyLoadImage, {\n  style: image.style,\n  alt: image.alt,\n  height: image.height,\n  src: image.src // use normal <img> attributes as props\n  ,\n  width: image.width,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }\n}, image.caption));\n\nconst {\n  BufferList\n} = require(\"bl\"); // https://www.npmjs.com/package/ipfs-http-client\n\n\nconst ipfsAPI = require(\"ipfs-http-client\");\n\nconst ipfs = ipfsAPI({\n  host: \"ipfs.infura.io\",\n  port: \"5001\",\n  protocol: \"https\"\n});\nconst ipfsGateway = \"https://cloudflare-ipfs.com/ipfs/\";\nconsole.log(\"üì¶ Assets: \", assets);\n/*\n    Welcome to üèó scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    üåè EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n/// üì° What chain are your contracts deployed to?\n\nconst targetNetwork = NETWORKS.mainnet; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n// üò¨ Sorry for all the console logging\n\nconst DEBUG = false; // helper function to \"Get\" from IPFS\n// you usually go content.toString() after this...\n\nconst getFromIPFS = async hashToGet => {\n  for await (const file of ipfs.get(hashToGet)) {\n    console.log(file.path);\n    if (!file.content) continue;\n    const content = new BufferList();\n\n    for await (const chunk of file.content) {\n      content.append(chunk);\n    }\n\n    console.log(content);\n    return content;\n  }\n}; // üõ∞ providers\n\n\nif (DEBUG) console.log(\"üì° Connecting to Mainnet Ethereum\"); // const injectedProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const injectedProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\n\nconst scaffoldEthProvider = new StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\");\nconst mainnetInfura = new StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID); // ( ‚ö†Ô∏è Getting \"failed to meet quorum\" errors? Check your INFURA_I\n\nconst getRandProviderUrl = () => targetNetwork.rpcUrl[Math.floor(Math.random() * targetNetwork.rpcUrl.length)]; // üè† Your local provider is usually pointed at your local blockchain\n\n\nlet localProviderUrl = getRandProviderUrl(); // as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\n\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"üè† Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new StaticJsonRpcProvider(localProviderUrlFromEnv); // üî≠ block explorer URL\n\nconst blockExplorer = targetNetwork.blockExplorer;\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\n\nconst web3Modal = new Web3Modal({\n  // network: \"mainnet\", // optional\n  cacheProvider: true,\n  // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider,\n      // required\n      options: {\n        infuraId: INFURA_ID\n      }\n    }\n  }\n});\n\nconst logoutOfWeb3Modal = async () => {\n  await web3Modal.clearCachedProvider();\n  setTimeout(() => {\n    window.location.reload();\n  }, 1);\n};\n\nfunction App(props) {\n  // scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n  const [injectedProvider, setInjectedProvider] = useState(); // Use your injected provider from ü¶ä Metamask or if you don't have it then instantly generate a üî• burner wallet.\n  // const injectedProvider = useinjectedProvider(injectedProvider);\n\n  const address = useUserAddress(injectedProvider);\n  /* üíµ This hook will get the price of ETH from ü¶Ñ Uniswap: */\n\n  const price = useExchangePrice(targetNetwork, injectedProvider);\n  /* üî• This hook will get the price of Gas from ‚õΩÔ∏è EtherGasStation */\n\n  const gasPrice = useGasPrice(targetNetwork, \"normal\"); // You can warn the user if you would like them to be on a specific network\n\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId = injectedProvider && injectedProvider._network && injectedProvider._network.chainId; // For more hooks, check out üîóeth-hooks at: https://www.npmjs.com/package/eth-hooks\n  // The transactor wraps transactions and provides notificiations\n\n  const tx = Transactor(injectedProvider, gasPrice); // Faucet Tx can be used to send funds from the faucet\n\n  const faucetTx = Transactor(localProvider, gasPrice); // üèó scaffold-eth is full of handy hooks like this one to get your balance:\n\n  const yourLocalBalance = useBalance(localProvider, address); // Just plug in different üõ∞ providers to get your balance on different chains:\n\n  const yourMainnetBalance = useBalance(injectedProvider, address); // Load in your local üìù contract and read a value from it:\n\n  const readContracts = useContractLoader(injectedProvider); // If you want to make üîê write transactions to your contracts, use the injectedProvider:\n\n  const writeContracts = useContractLoader(injectedProvider); // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  // const mainnetDAIContract = useExternalContractLoader(injectedProvider, DAI_ADDRESS, DAI_ABI);\n  // If you want to call a function on a new block\n  // useOnBlock(injectedProvider, () => {\n  //   console.log(`‚õì A new mainnet block is here: ${injectedProvider._lastBlockNumber}`);\n  // });\n  // Then read your DAI balance like:\n  // const myMainnetDAIBalance = useContractReader({ DAI: mainnetDAIContract }, \"DAI\", \"balanceOf\", [\n  //   \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  // ]);\n  // keep track of a variable from the contract in the local React state:\n\n  const balance = useContractReader(readContracts, \"Crabrades\", \"balanceOf\", [address]);\n  console.log(\"ü§ó balance:\", balance); // üìü Listen for broadcast events\n\n  const transferEvents = useEventListener(readContracts, \"Crabrades\", \"Transfer\", injectedProvider, 1);\n  console.log(\"üìü Transfer events:\", transferEvents); //\n  // üß† This effect will update crabrades by polling when your balance changes\n  //\n\n  const maxSupply = 9999;\n  const maxReserved = 35;\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\n  const [crabrades, setCrabrades] = useState();\n  const [mintPrice, setMintPrice] = useState(false);\n  const [supply, setSupply] = useState(false); // const [maxSupply, setMaxSupply] = useState(false);\n  // const [reserved, setResrved] = useState(false);\n\n  useEffect(() => {\n    if (readContracts && readContracts.Crabrades && !mintPrice) (async () => {\n      const mp = await readContracts.Crabrades.getPrice(); // const reserved = await readContracts.Crabrades.getRemainingReserved();\n\n      const supply = await readContracts.Crabrades.totalSupply(); // setResrved(reserved);\n\n      setSupply(supply);\n      setMintPrice(formatEther(mp));\n    })();\n  }, [mintPrice, readContracts]);\n  useEffect(() => {\n    const updateCrabrades = async () => {\n      const collectibleUpdate = [];\n\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\n        try {\n          console.log(\"GEtting token index\", tokenIndex);\n          const tokenId = await readContracts.Crabrades.tokenOfOwnerByIndex(address, tokenIndex);\n          console.log(\"tokenId\", tokenId);\n          const tokenURI = await readContracts.Crabrades.tokenURI(tokenId);\n          console.log(\"tokenURI\", tokenURI);\n          let data = {};\n\n          try {\n            const result = await axios.get(tokenURI);\n            data = result.data;\n            data.image = data.image.replace(\"ipfs://\", ipfsGateway);\n          } catch (e) {\n            console.log(e);\n          }\n\n          collectibleUpdate.push({\n            id: tokenId,\n            uri: tokenURI,\n            owner: address,\n            ...data\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      setCrabrades(collectibleUpdate);\n    };\n\n    updateCrabrades();\n  }, [address, yourBalance]);\n  /*\n  const addressFromENS = useResolveName(injectedProvider, \"austingriffith.eth\");\n  console.log(\"üè∑ Resolved austingriffith.eth as:\",addressFromENS)\n  */\n  //\n  // üß´ DEBUG üë®üèª‚Äçüî¨\n  //\n\n  useEffect(() => {\n    if (DEBUG && injectedProvider && address && selectedChainId && yourLocalBalance && yourMainnetBalance && readContracts && writeContracts // &&\n    // mainnetDAIContract\n    ) {\n        console.log(\"_____________________________________ üèó scaffold-eth _____________________________________\");\n        console.log(\"üåé injectedProvider\", injectedProvider);\n        console.log(\"üè† localChainId\", localChainId);\n        console.log(\"üë©‚Äçüíº selected address:\", address);\n        console.log(\"üïµüèª‚Äç‚ôÇÔ∏è selectedChainId:\", selectedChainId); // console.log(\"üíµ yourLocalBalance\", yourLocalBalance ? formatEther(yourLocalBalance) : \"...\");\n        // console.log(\"üíµ yourMainnetBalance\", yourMainnetBalance ? formatEther(yourMainnetBalance) : \"...\");\n\n        console.log(\"üìù readContracts\", readContracts); // console.log(\"üåç DAI contract on mainnet:\", mainnetDAIContract);\n\n        console.log(\"üîê writeContracts\", writeContracts);\n      }\n  }, [injectedProvider, address, selectedChainId, yourLocalBalance, yourMainnetBalance, readContracts, writeContracts // mainnetDAIContract,\n  ]);\n  let networkDisplay = \"\";\n\n  if (localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          zIndex: 2,\n          position: \"absolute\",\n          right: 0,\n          top: 60,\n          padding: 16\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Alert, {\n        message: \"\\u26A0\\uFE0F Wrong Network ID\",\n        description: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }\n        }, \"You have \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 26\n          }\n        }, \"chain id 1337\"), \" for localhost and you need to change it to \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 90\n          }\n        }, \"31337\"), \" to work with HardHat.\", /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 17\n          }\n        }, \"(MetaMask -> Settings -> Networks -> Chain ID -> 31337)\")),\n        type: \"error\",\n        closable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      networkDisplay = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          zIndex: 2,\n          position: \"absolute\",\n          right: 0,\n          top: 60,\n          padding: 16\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Alert, {\n        message: \"\\u26A0\\uFE0F Wrong Network\",\n        description: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }\n        }, \"You have \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 26\n          }\n        }, networkSelected && networkSelected.name), \" selected and you need to be on\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 17\n          }\n        }, networkLocal && networkLocal.name), \".\"),\n        type: \"error\",\n        closable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }\n      }));\n    }\n  } else {\n    networkDisplay = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        zIndex: -1,\n        position: \"absolute\",\n        right: 154,\n        top: 28,\n        padding: 16,\n        color: targetNetwork.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 7\n      }\n    }, targetNetwork.name);\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new Web3Provider(provider));\n  }, [setInjectedProvider]);\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name === \"localhost\";\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  if (!faucetClicked && localProvider && localProvider._network && localProvider._network.chainId === 31337 && // yourLocalBalance &&\n  formatEther(yourLocalBalance) <= 0) {\n    faucetHint = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 16\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => {\n        faucetTx({\n          to: address,\n          value: parseEther(\"0.01\")\n        });\n        setFaucetClicked(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }\n    }, \"\\uD83D\\uDCB0 Grab funds from the faucet \\u26FD\\uFE0F\"));\n  }\n\n  const [sending, setSending] = useState();\n  const [ipfsHash, setIpfsHash] = useState();\n  const [ipfsDownHash, setIpfsDownHash] = useState();\n  const [downloading, setDownloading] = useState();\n  const [ipfsContent, setIpfsContent] = useState();\n  const [transferToAddresses, setTransferToAddresses] = useState({});\n  const [loadedAssets, setLoadedAssets] = useState(); // const [mintPrice, setMintPrice] = useState();\n\n  const [nfts, setNfts] = useState([]);\n  useEffect(() => {\n    const updateCrabrades = async () => {\n      const assetUpdate = [];\n\n      for (const a in transferEvents) {\n        try {\n          let transfer = transferEvents[a];\n          let owner;\n          const tokenURI = await readContracts.Crabrades.tokenURI(transfer[2]);\n          owner = await readContracts.Crabrades.ownerOf(transfer[2].toNumber());\n          let data = {};\n\n          try {\n            const result = await axios.get(tokenURI);\n            data = result.data;\n            data.image = data.image.replace(\"ipfs://\", ipfsGateway);\n          } catch (e) {\n            console.log(e);\n          }\n\n          assetUpdate.push({\n            id: transfer[2].toNumber(),\n            owner,\n            tokenURI,\n            metadata: data\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      setLoadedAssets(assetUpdate);\n    };\n\n    if (readContracts && readContracts.Crabrades) updateCrabrades();\n  }, [readContracts, transferEvents]);\n  const galleryList = [];\n\n  for (const a in loadedAssets) {\n    console.log(\"loadedAssets\", a, loadedAssets[a]);\n    const cardActions = []; // if (loadedAssets[a].forSale) {\n    //   cardActions.push(\n    //     <div>\n    //       <Button\n    //         onClick={() => {\n    //           console.log(\"gasPrice,\", gasPrice);\n    //           tx(writeContracts.Crabrades.mintItem(loadedAssets[a].id, { gasPrice }));\n    //         }}\n    //       >\n    //         Mint\n    //       </Button>\n    //     </div>,\n    //   );\n    // } else {\n\n    cardActions.push( /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 7\n      }\n    }, \"owned by:\", \" \", /*#__PURE__*/React.createElement(Address, {\n      address: loadedAssets[a].owner,\n      ensProvider: injectedProvider,\n      blockExplorer: blockExplorer,\n      minimized: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }\n    }))); // }\n\n    galleryList.push( /*#__PURE__*/React.createElement(Card, {\n      style: {\n        width: 200\n      },\n      key: loadedAssets[a].metadata.name,\n      actions: cardActions,\n      title: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }\n      }, loadedAssets[a].metadata.name, \" \", /*#__PURE__*/React.createElement(\"a\", {\n        style: {\n          cursor: \"pointer\",\n          opacity: 0.33\n        },\n        href: `https://opensea.io/assets/0x280ecba1194ae1500ddad4a5f4a7e8270066146a/${loadedAssets[a].id}`,\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(LinkOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 15\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        maxWidth: 130\n      },\n      src: loadedAssets[a].metadata.image,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        opacity: 0.77\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }\n    }, JSON.toString(loadedAssets[a].metadata.attributes))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ThemeSwitch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"fixed\",\n      textAlign: \"right\",\n      right: 0,\n      top: 0,\n      padding: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Account, {\n    address: address,\n    localProvider: localProvider,\n    injectedProvider: injectedProvider,\n    injectedProvider: injectedProvider,\n    price: price,\n    web3Modal: web3Modal,\n    loadWeb3Modal: loadWeb3Modal,\n    logoutOfWeb3Modal: logoutOfWeb3Modal,\n    blockExplorer: blockExplorer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 9\n    }\n  })));\n}\n/* eslint-disable */\n\n\nwindow.ethereum && window.ethereum.on(\"chainChanged\", chainId => {\n  web3Modal.cachedProvider && setTimeout(() => {\n    window.location.reload();\n  }, 1);\n});\nwindow.ethereum && window.ethereum.on(\"accountsChanged\", accounts => {\n  web3Modal.cachedProvider && setTimeout(() => {\n    window.location.reload();\n  }, 1);\n});\n/* eslint-enable */\n\nexport default App;","map":{"version":3,"sources":["/Users/yuzucchi/Documents/operations/nft/scaffold-eth/packages/react-app/src/App.jsx"],"names":["LinkOutlined","StaticJsonRpcProvider","Web3Provider","formatEther","parseEther","WalletConnectProvider","Alert","Button","Card","Col","Input","List","Menu","Row","useUserAddress","utils","React","useCallback","useEffect","useState","ReactJson","BrowserRouter","Link","Route","Switch","Web3Modal","assets","Account","Address","AddressInput","Contract","Faucet","GasGauge","Header","Ramp","ThemeSwitch","Navbar","DAI_ABI","DAI_ADDRESS","INFURA_ID","NETWORK","NETWORKS","Transactor","axios","LazyLoadImage","useBalance","useContractLoader","useContractReader","useEventListener","useExchangePrice","useExternalContractLoader","useGasPrice","useOnBlock","useinjectedProvider","css","ClipLoader","nftImg","image","style","alt","height","src","width","caption","BufferList","require","ipfsAPI","ipfs","host","port","protocol","ipfsGateway","console","log","targetNetwork","mainnet","DEBUG","getFromIPFS","hashToGet","file","get","path","content","chunk","append","scaffoldEthProvider","mainnetInfura","getRandProviderUrl","rpcUrl","Math","floor","random","length","localProviderUrl","localProviderUrlFromEnv","process","env","REACT_APP_PROVIDER","localProvider","blockExplorer","web3Modal","cacheProvider","providerOptions","walletconnect","package","options","infuraId","logoutOfWeb3Modal","clearCachedProvider","setTimeout","window","location","reload","App","props","injectedProvider","setInjectedProvider","address","price","gasPrice","localChainId","_network","chainId","selectedChainId","tx","faucetTx","yourLocalBalance","yourMainnetBalance","readContracts","writeContracts","balance","transferEvents","maxSupply","maxReserved","yourBalance","toNumber","crabrades","setCrabrades","mintPrice","setMintPrice","supply","setSupply","Crabrades","mp","getPrice","totalSupply","updateCrabrades","collectibleUpdate","tokenIndex","tokenId","tokenOfOwnerByIndex","tokenURI","data","result","replace","e","push","id","uri","owner","networkDisplay","networkSelected","networkLocal","zIndex","position","right","top","padding","name","color","loadWeb3Modal","provider","connect","cachedProvider","route","setRoute","pathname","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","to","value","sending","setSending","ipfsHash","setIpfsHash","ipfsDownHash","setIpfsDownHash","downloading","setDownloading","ipfsContent","setIpfsContent","transferToAddresses","setTransferToAddresses","loadedAssets","setLoadedAssets","nfts","setNfts","assetUpdate","a","transfer","ownerOf","metadata","galleryList","cardActions","cursor","opacity","maxWidth","JSON","toString","attributes","textAlign","ethereum","on","accounts"],"mappings":"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","sourcesContent":["import { LinkOutlined } from \"@ant-design/icons\";\nimport { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport { formatEther, parseEther } from \"@ethersproject/units\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Alert, Button, Card, Col, Input, List, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { utils } from \"ethers\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactJson from \"react-json-view\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport assets from \"./assets.js\";\nimport {\n  Account,\n  Address,\n  AddressInput,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  Navbar,\n} from \"./components\";\nimport { DAI_ABI, DAI_ADDRESS, INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport axios from \"axios\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useEventListener,\n  useExchangePrice,\n  useExternalContractLoader,\n  useGasPrice,\n  useOnBlock,\n  useinjectedProvider,\n} from \"./hooks\";\nimport { css } from \"@emotion/react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst nftImg = ({ image }) => (\n  <div>\n    <LazyLoadImage\n      style={image.style}\n      alt={image.alt}\n      height={image.height}\n      src={image.src} // use normal <img> attributes as props\n      width={image.width}\n    />\n    <span>{image.caption}</span>\n  </div>\n);\nconst { BufferList } = require(\"bl\");\n// https://www.npmjs.com/package/ipfs-http-client\nconst ipfsAPI = require(\"ipfs-http-client\");\n\nconst ipfs = ipfsAPI({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\nconst ipfsGateway = \"https://cloudflare-ipfs.com/ipfs/\";\nconsole.log(\"üì¶ Assets: \", assets);\n\n/*\n    Welcome to üèó scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    üåè EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// üì° What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.mainnet; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// üò¨ Sorry for all the console logging\nconst DEBUG = false;\n\n// helper function to \"Get\" from IPFS\n// you usually go content.toString() after this...\nconst getFromIPFS = async hashToGet => {\n  for await (const file of ipfs.get(hashToGet)) {\n    console.log(file.path);\n    if (!file.content) continue;\n    const content = new BufferList();\n    for await (const chunk of file.content) {\n      content.append(chunk);\n    }\n    console.log(content);\n    return content;\n  }\n};\n\n// üõ∞ providers\nif (DEBUG) console.log(\"üì° Connecting to Mainnet Ethereum\");\n// const injectedProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const injectedProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = new StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\");\nconst mainnetInfura = new StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID);\n// ( ‚ö†Ô∏è Getting \"failed to meet quorum\" errors? Check your INFURA_I\n\nconst getRandProviderUrl = () => targetNetwork.rpcUrl[Math.floor(Math.random() * targetNetwork.rpcUrl.length)];\n// üè† Your local provider is usually pointed at your local blockchain\nlet localProviderUrl = getRandProviderUrl();\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"üè† Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// üî≠ block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  // network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId: INFURA_ID,\n      },\n    },\n  },\n});\n\nconst logoutOfWeb3Modal = async () => {\n  await web3Modal.clearCachedProvider();\n  setTimeout(() => {\n    window.location.reload();\n  }, 1);\n};\n\nfunction App(props) {\n  // scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  // Use your injected provider from ü¶ä Metamask or if you don't have it then instantly generate a üî• burner wallet.\n  // const injectedProvider = useinjectedProvider(injectedProvider);\n  const address = useUserAddress(injectedProvider);\n  /* üíµ This hook will get the price of ETH from ü¶Ñ Uniswap: */\n  const price = useExchangePrice(targetNetwork, injectedProvider);\n\n  /* üî• This hook will get the price of Gas from ‚õΩÔ∏è EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"normal\");\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId = injectedProvider && injectedProvider._network && injectedProvider._network.chainId;\n\n  // For more hooks, check out üîóeth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(injectedProvider, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // üèó scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different üõ∞ providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(injectedProvider, address);\n\n  // Load in your local üìù contract and read a value from it:\n  const readContracts = useContractLoader(injectedProvider);\n\n  // If you want to make üîê write transactions to your contracts, use the injectedProvider:\n  const writeContracts = useContractLoader(injectedProvider);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  // const mainnetDAIContract = useExternalContractLoader(injectedProvider, DAI_ADDRESS, DAI_ABI);\n\n  // If you want to call a function on a new block\n  // useOnBlock(injectedProvider, () => {\n  //   console.log(`‚õì A new mainnet block is here: ${injectedProvider._lastBlockNumber}`);\n  // });\n\n  // Then read your DAI balance like:\n  // const myMainnetDAIBalance = useContractReader({ DAI: mainnetDAIContract }, \"DAI\", \"balanceOf\", [\n  //   \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  // ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const balance = useContractReader(readContracts, \"Crabrades\", \"balanceOf\", [address]);\n  console.log(\"ü§ó balance:\", balance);\n\n  // üìü Listen for broadcast events\n  const transferEvents = useEventListener(readContracts, \"Crabrades\", \"Transfer\", injectedProvider, 1);\n  console.log(\"üìü Transfer events:\", transferEvents);\n\n  //\n  // üß† This effect will update crabrades by polling when your balance changes\n  //\n  const maxSupply = 9999;\n  const maxReserved = 35;\n\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\n  const [crabrades, setCrabrades] = useState();\n  const [mintPrice, setMintPrice] = useState(false);\n  const [supply, setSupply] = useState(false);\n  // const [maxSupply, setMaxSupply] = useState(false);\n  // const [reserved, setResrved] = useState(false);\n\n  useEffect(() => {\n    if (readContracts && readContracts.Crabrades && !mintPrice)\n      (async () => {\n        const mp = await readContracts.Crabrades.getPrice();\n        // const reserved = await readContracts.Crabrades.getRemainingReserved();\n        const supply = await readContracts.Crabrades.totalSupply();\n\n        // setResrved(reserved);\n        setSupply(supply);\n        setMintPrice(formatEther(mp));\n      })();\n  }, [mintPrice, readContracts]);\n\n  useEffect(() => {\n    const updateCrabrades = async () => {\n      const collectibleUpdate = [];\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\n        try {\n          console.log(\"GEtting token index\", tokenIndex);\n          const tokenId = await readContracts.Crabrades.tokenOfOwnerByIndex(address, tokenIndex);\n          console.log(\"tokenId\", tokenId);\n          const tokenURI = await readContracts.Crabrades.tokenURI(tokenId);\n          console.log(\"tokenURI\", tokenURI);\n\n          let data = {};\n          try {\n            const result = await axios.get(tokenURI);\n            data = result.data;\n            data.image = data.image.replace(\"ipfs://\", ipfsGateway);\n          } catch (e) {\n            console.log(e);\n          }\n\n          collectibleUpdate.push({ id: tokenId, uri: tokenURI, owner: address, ...data });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      setCrabrades(collectibleUpdate);\n    };\n    updateCrabrades();\n  }, [address, yourBalance]);\n\n  /*\n  const addressFromENS = useResolveName(injectedProvider, \"austingriffith.eth\");\n  console.log(\"üè∑ Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // üß´ DEBUG üë®üèª‚Äçüî¨\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      injectedProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts\n      // &&\n      // mainnetDAIContract\n    ) {\n      console.log(\"_____________________________________ üèó scaffold-eth _____________________________________\");\n      console.log(\"üåé injectedProvider\", injectedProvider);\n      console.log(\"üè† localChainId\", localChainId);\n      console.log(\"üë©‚Äçüíº selected address:\", address);\n      console.log(\"üïµüèª‚Äç‚ôÇÔ∏è selectedChainId:\", selectedChainId);\n      // console.log(\"üíµ yourLocalBalance\", yourLocalBalance ? formatEther(yourLocalBalance) : \"...\");\n      // console.log(\"üíµ yourMainnetBalance\", yourMainnetBalance ? formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"üìù readContracts\", readContracts);\n      // console.log(\"üåç DAI contract on mainnet:\", mainnetDAIContract);\n      console.log(\"üîê writeContracts\", writeContracts);\n    }\n  }, [\n    injectedProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    // mainnetDAIContract,\n  ]);\n\n  let networkDisplay = \"\";\n  if (localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"‚ö†Ô∏è Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"‚ö†Ô∏è Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <b>{networkLocal && networkLocal.name}</b>.\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new Web3Provider(provider));\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name === \"localhost\";\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    // yourLocalBalance &&\n    formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          üí∞ Grab funds from the faucet ‚õΩÔ∏è\n        </Button>\n      </div>\n    );\n  }\n\n  const [sending, setSending] = useState();\n  const [ipfsHash, setIpfsHash] = useState();\n  const [ipfsDownHash, setIpfsDownHash] = useState();\n\n  const [downloading, setDownloading] = useState();\n  const [ipfsContent, setIpfsContent] = useState();\n\n  const [transferToAddresses, setTransferToAddresses] = useState({});\n\n  const [loadedAssets, setLoadedAssets] = useState();\n  // const [mintPrice, setMintPrice] = useState();\n\n  const [nfts, setNfts] = useState([]);\n  useEffect(() => {\n    const updateCrabrades = async () => {\n      const assetUpdate = [];\n      for (const a in transferEvents) {\n        try {\n          let transfer = transferEvents[a];\n          let owner;\n          const tokenURI = await readContracts.Crabrades.tokenURI(transfer[2]);\n          owner = await readContracts.Crabrades.ownerOf(transfer[2].toNumber());\n          let data = {};\n          try {\n            const result = await axios.get(tokenURI);\n            data = result.data;\n            data.image = data.image.replace(\"ipfs://\", ipfsGateway);\n          } catch (e) {\n            console.log(e);\n          }\n          assetUpdate.push({ id: transfer[2].toNumber(), owner, tokenURI, metadata: data });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      setLoadedAssets(assetUpdate);\n    };\n    if (readContracts && readContracts.Crabrades) updateCrabrades();\n  }, [readContracts, transferEvents]);\n\n  const galleryList = [];\n  for (const a in loadedAssets) {\n    console.log(\"loadedAssets\", a, loadedAssets[a]);\n\n    const cardActions = [];\n    // if (loadedAssets[a].forSale) {\n    //   cardActions.push(\n    //     <div>\n    //       <Button\n    //         onClick={() => {\n    //           console.log(\"gasPrice,\", gasPrice);\n    //           tx(writeContracts.Crabrades.mintItem(loadedAssets[a].id, { gasPrice }));\n    //         }}\n    //       >\n    //         Mint\n    //       </Button>\n    //     </div>,\n    //   );\n    // } else {\n    cardActions.push(\n      <div>\n        owned by:{\" \"}\n        <Address\n          address={loadedAssets[a].owner}\n          ensProvider={injectedProvider}\n          blockExplorer={blockExplorer}\n          minimized\n        />\n      </div>,\n    );\n    // }\n\n    galleryList.push(\n      <Card\n        style={{ width: 200 }}\n        key={loadedAssets[a].metadata.name}\n        actions={cardActions}\n        title={\n          <div>\n            {loadedAssets[a].metadata.name}{\" \"}\n            <a\n              style={{ cursor: \"pointer\", opacity: 0.33 }}\n              href={`https://opensea.io/assets/0x280ecba1194ae1500ddad4a5f4a7e8270066146a/${loadedAssets[a].id}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <LinkOutlined />\n            </a>\n          </div>\n        }\n      >\n        {/* <nftImg \n            style={{ maxWidth: 130 }} src={loadedAssets[a].metadata.image} alt=\"\"\n        /> */}\n        <img style={{ maxWidth: 130 }} src={loadedAssets[a].metadata.image} alt=\"\" />\n        <div style={{ opacity: 0.77 }}>{JSON.toString(loadedAssets[a].metadata.attributes)}</div>\n      </Card>,\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {/* ‚úèÔ∏è Edit the header and change the title to your project name */}\n      {/* <Header /> */}\n      {/* {networkDisplay} */}\n      {/* <BrowserRouter> */}\n\n        {/* <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              onClick={() => {\n                setRoute(\"/\");\n              }}\n              to=\"/\"\n            >\n              Gallery\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/yourcollectibles\">\n            <Link\n              onClick={() => {\n                setRoute(\"/yourcollectibles\");\n              }}\n              to=\"/yourcollectibles\"\n            >\n             My Crabrades\n            </Link>\n          </Menu.Item>\n          {DEBUG && (\n            <Menu.Item key=\"/transfers\">\n              <Link\n                onClick={() => {\n                  setRoute(\"/transfers\");\n                }}\n                to=\"/transfers\"\n              >\n                Transfers\n              </Link>\n            </Menu.Item>\n          )}\n          {DEBUG && (\n            <Menu.Item key=\"/ipfsup\">\n              <Link\n                onClick={() => {\n                  setRoute(\"/ipfsup\");\n                }}\n                to=\"/ipfsup\"\n              >\n                IPFS Upload\n              </Link>\n            </Menu.Item>\n          )}\n          {DEBUG && (\n            <Menu.Item key=\"/ipfsdown\">\n              <Link\n                onClick={() => {\n                  setRoute(\"/ipfsdown\");\n                }}\n                to=\"/ipfsdown\"\n              >\n                IPFS Download\n              </Link>\n            </Menu.Item>\n          )}\n          {DEBUG && (\n            <Menu.Item key=\"/debugcontracts\">\n              <Link\n                onClick={() => {\n                  setRoute(\"/debugcontracts\");\n                }}\n                to=\"/debugcontracts\"\n              >\n                Debug Contracts\n              </Link>\n            </Menu.Item>\n          )}\n        </Menu> */}\n        <Navbar />\n\n        \n      {/* </BrowserRouter> */}\n\n      <ThemeSwitch />\n\n      {/* üë®‚Äçüíº Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          injectedProvider={injectedProvider}\n          injectedProvider={injectedProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n        />\n        {/* {faucetHint} */}\n      </div>\n\n      {/* üó∫ Extra UI like gas price, eth price, faucet, and support: */}\n      {/* <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                üí¨\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {faucetAvailable ? (\n              <Faucet localProvider={localProvider} price={price} ensProvider={injectedProvider} />\n            ) : (\n              \"\"\n            )}\n          </Col>\n        </Row>\n      </div> */}\n    </div>\n  );\n}\n\n/* eslint-disable */\nwindow.ethereum &&\n  window.ethereum.on(\"chainChanged\", chainId => {\n    web3Modal.cachedProvider &&\n      setTimeout(() => {\n        window.location.reload();\n      }, 1);\n  });\n\nwindow.ethereum &&\n  window.ethereum.on(\"accountsChanged\", accounts => {\n    web3Modal.cachedProvider &&\n      setTimeout(() => {\n        window.location.reload();\n      }, 1);\n  });\n/* eslint-enable */\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}